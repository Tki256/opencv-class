// コード解説
画像の読み込み:
imread 関数を使用して指定されたパスから画像を読み込みます。
レンズ歪み補正:
undistort 関数を使用して、カメラキャリブレーションのパラメータ（K行列とD係数）に基づいてレンズ歪みを補正します。
グレースケール変換:
cvtColor 関数を使用して、歪み補正された画像をRGBからグレースケールに変換します。
上面視点への変換:
この部分が最も重要で複雑です。以下の手順で行われます：
a. 新しい画像（topImage, topImageGray）を作成し、黒で初期化します。
b. カメラと地面の幾何学的関係を定義するパラメータを設定します（Hvc, Hc, Dvc, f, theta など）。
c. 元の画像の各ピクセルに対して、以下の処理を行います：

ピクセル座標を画像中心を原点とする座標系に変換
幾何学的な計算を行い、上面視点での新しい座標を計算
新しい座標が有効な範囲内にある場合、その位置に元の画像のピクセル値を設定

この変換により、地面に対して斜めに撮影された画像が、上から見たような視点に変換されます。
結果の表示:
処理の各段階（元画像、歪み補正後、グレースケール、上面視点）の画像を表示します。

このコードは主にOpenCVライブラリを使用して画像処理を行っています。上面視点への変換は、カメラの位置や角度、焦点距離などのパラメータを考慮した幾何学的な計算に基づいています。この変換により、例えば道路の画像を真上から見たような形に変換することができ、自動運転や監視システムなどの応用で有用です。


//パラメータについて
Hvc = 2: 仮想カメラの高さ（メートル単位）。上面視点の視点の高さを表します。

Hc = 0.7: 実際のカメラの高さ（メートル単位）。地面からの実際のカメラの高さです。

Dvc = 1.7: 仮想カメラと実際のカメラの水平距離（メートル単位）。

f = 630: 実際のカメラの焦点距離（ピクセル単位）。

fp = f: 仮想カメラの焦点距離。ここでは実際のカメラと同じ値に設定されています。

theta = 30.0 / 180.0 * M_PI: カメラの傾斜角（ラジアン単位）。30度を弧度法に変換しています。

s = sin(theta), c = cos(theta): 傾斜角のサインとコサイン。頻繁に使用される値を事前に計算しています。

cx = 640, cy = 480: 元の画像の中心座標（ピクセル単位）。

cxp = 640, cyp = 480: 変換後の画像の中心座標（ピクセル単位）。

//一番よさそう
double Hvc = 1.0;
double Hc = 0.1;
double Dvc = 0.1;
double f = 509;
double fp = f;
double theta = 30.0 / 180.0 * M_PI;
double s = sin(theta);
double c = cos(theta);
int cx = 450;
int cy = 500;
int cxp = 450;
int cyp = 500;